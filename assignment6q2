#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;
};

class DoublyLinkedList {
    Node* head;

public:
    DoublyLinkedList() {
        head = nullptr;
    }

    void insertAtBeginning(int value) {
        Node* newNode = new Node{value, nullptr, head};
        if (head != nullptr) {
            head->prev = newNode;
        }
        head = newNode;
    }

    void insertAtEnd(int value) {
        Node* newNode = new Node{value, nullptr, nullptr};
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }

    void insertAfter(int afterValue, int value) {
        Node* temp = head;
        while (temp != nullptr && temp->data != afterValue) {
            temp = temp->next;
        }
        if (temp == nullptr) {
            cout << "not found";
            return;
        }
        Node* newNode = new Node{value, temp, temp->next};
        if (temp->next != nullptr) {
            temp->next->prev = newNode;
        }
        temp->next = newNode;
    }

    void insertBefore(int beforeValue, int value) {
        Node* temp = head;
        while (temp != nullptr && temp->data != beforeValue) {
            temp = temp->next;
        }
        if (temp == nullptr) {
            cout << "not found";
            return;
        }
        Node* newNode = new Node{value, temp->prev, temp};
        if (temp->prev != nullptr) {
            temp->prev->next = newNode;
        } else {

            head = newNode;
        }
        temp->prev = newNode;
    }

    void deleteNode(int value) {
        Node* temp = head;
        while (temp != nullptr && temp->data != value) {
            temp = temp->next;
        }
        if (temp == nullptr) {
            cout << "not found";
            return;
        }
        if (temp->prev != nullptr) {
            temp->prev->next = temp->next;
        } else {
            head = temp->next;
        }
        if (temp->next != nullptr) {
            temp->next->prev = temp->prev;
        }
        delete temp;
        cout<<"deleted"
    }

     void display() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        cout << "List: ";
        while (temp != nullptr) {
            cout << temp->data << " <-> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

int main() {
    DoublyLinkedList dll;
    int choice, value, afterBeforeValue;

    do {

        cout << "1.Insert at beginning\n";
        cout << "2.Insert at end\n";
        cout << "3.Insert after a specific node\n";
        cout << "4.Insert before a specific node\n";
        cout << "5.Delete a node\n";
        cout << "6.Display the list\n";
        cout << "7.Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert at beginning: ";
                cin >> value;
                dll.insertAtBeginning(value);
                break;

            case 2:
                cout << "Enter value to insert at end: ";
                cin >> value;
                dll.insertAtEnd(value);
                break;

            case 3:
                cout << "Enter the value after which to insert: ";
                cin >> afterBeforeValue;
                cout << "Enter value to insert: ";
                cin >> value;
                dll.insertAfter(afterBeforeValue, value);
                break;

            case 4:
                cout << "Enter the value before which to insert: ";
                cin >> afterBeforeValue;
                cout << "Enter value to insert: ";
                cin >> value;
                dll.insertBefore(afterBeforeValue, value);
                break;

            case 5:
                cout << "Enter value to delete: ";
                cin >> value;
                dll.deleteNode(value);
                break;

            case 6:
                dll.display();
                break;

            case 7:

                break;

            default:
                cout << "again\n";
        }

    } while (choice != 7);

    return 0;
}
